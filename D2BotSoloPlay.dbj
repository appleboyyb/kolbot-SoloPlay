/* eslint-disable no-fallthrough */
include("StarterConfig.js");

// D2BotSoloPlay settings
Starter.Config.InvalidPasswordDelay = 10; // Minutes to wait after getting Invalid Password message
Starter.Config.GameDoesNotExistTimeout = 600; // Seconds to wait before cancelling the 'Game does not exist.' screen
Starter.Config.DelayBeforeLogin = rand(5, 25); // Seconds to wait before logging in
Starter.Config.VersionErrorDelay = rand(5, 30); // Seconds to wait after 'unable to identify version' message

// Global Account Settings.
Starter.Config.GlobalAccount = ""; // Set value for a global account. (MAX Characters 12 plus AccountSuffixLength) 
Starter.Config.AccountSuffixLength = 3; // Set Global Account value for random numbers at the end of the name. (Minimum suffix 3)
Starter.Config.GlobalAccountPassword = ""; // Set value for a global password for account generation.

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

let ChannelConfig = {
	/* Override default values for JoinChannel, FirstJoinMessage, AnnounceGames and AfterGameMessage per profile
		It's possible to override any number of these options (you don't have to put all of them)

		**** DO NOT EDIT ANYTHING INSIDE THIS COMMENT BLOCK ***

		Format:

		"Profile Name": {
			JoinChannel: "channel name", -OR- ["channel 1", "channel 2"],
			FirstJoinMessage: "first message", -OR- ["join msg 1", "join msg 2"],
			AnnounceGames: true,
			AfterGameMessage: "message after a finished run" -OR- ["msg 1", msg 2"]
		}
	*/
	// Add your lines under here

};

// No touchy!
include('polyfill.js');
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/util.js");
include("common/pather.js");
include("common/prototypes.js");
include("SoloPlay/Tools/Developer.js");
include("SoloPlay/Tools/CharData.js");
include("SoloPlay/Tools/Tracker.js");
include("SoloPlay/Tools/NameGen.js");
include("SoloPlay/Tools/OOGOverrides.js");
include("SoloPlay/Functions/SoloEvents.js");
include("SoloPlay/Functions/ConfigOverrides.js");
let Controls = require('./modules/Control');
let Overrides = require('./modules/Override');

let joinInfo, chatActionsDone,
	gameTracker,
	setUp = {},
	battlenet = ([sdk.game.profiletype.Battlenet, sdk.game.profiletype.OpenBattlenet].includes(Profile().type)),
	charClassMap = {"ZON": "amazon", "SOR": "sorceress", "NEC": "necromancer", "PAL": "paladin", "BAR": "barbarian", "DRU": "druid", "SIN": "assassin"};

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
	delay(Math.floor(rand(1, 20)));
}

if (!FileTools.exists(CharData.filePath) && CharData.create()) {
	delay(Math.floor(rand(1, 20)));
}

Developer.logPerformance && Tracker.initialize();

new Overrides.Override(Starter, Starter.receiveCopyData, function(orignal, mode, msg) {
	switch (mode) {
	case 1: // Join Info
		print("Got Join Info");
		joinInfo = JSON.parse(msg);

		SoloEvents.gameInfo.gameName = joinInfo.gameName.toLowerCase();
		SoloEvents.gameInfo.gamePass = joinInfo.gamePass.toLowerCase();

		break;
	case 1638:
		try {
			let obj = JSON.parse(msg);
			setUp.profile = me.profile.toUpperCase();
			setUp.account = obj.Account;
			setUp.password = "";
			setUp.charName = obj.Character;
			setUp.tag = (obj.Tag.trim().capitalize(true) || "");
			setUp.difficulty = obj.Difficulty;
			obj.Realm = obj.Realm.toLowerCase();
			setUp.realm = ["east", "west"].includes(obj.Realm) ? "us" + obj.Realm : obj.Realm;

			let buildCheck = setUp.profile.split("-"); // SCL-ZON123
			setUp.hardcore = buildCheck[0].indexOf("HC") !== -1; // SC softcore = false
			setUp.expansion = buildCheck[0].indexOf("CC") === -1; // not CC so not classic - true
			setUp.ladder = buildCheck[0].indexOf("NL") === -1; // not NL so its ladder - true

			if (buildCheck.length <= 1) {
				D2Bot.printToConsole('Please update profile name. Example: "HCCNL-PAL" will make a Hardcore Classic NonLadder Paladin', 6);
				D2Bot.printToConsole("If you are still confused please read the included readMe. https://github.com/blizzhackers/kolbot-SoloPlay/blob/main/README.md", 6);
				D2Bot.stop();
			}

			buildCheck[1] = buildCheck[1].toString().substring(0, 3);

			if (charClassMap[buildCheck[1]]) {
				setUp.charClass = charClassMap[buildCheck[1]];
			} else {
				throw new Error("Invalid profile name, couldn't set character class");
			}

			if (setUp.tag !== "") {
				{
					let soloStats = CharData.getStats();

					if (!soloStats.me.finalBuild || soloStats.me.finalBuild !== setUp.tag) {
						D2Bot.setProfile(null, null, null, null, null, setUp.tag);
						CharData.updateData("me", "finalBuild", setUp.tag);
						soloStats.me.finalBuild = setUp.tag;
					}

					if (!["Start", "Stepping", "Leveling"].includes(soloStats.me.currentBuild) && soloStats.me.currentBuild !== soloStats.me.finalBuild) {
						CharData.updateData("me", "currentBuild", "Leveling");
						soloStats.me.currentBuild = "Leveling";
					}
				}
			} else {
				throw new Error("Please update profile InfoTag. Missing the finalBuild.");
			}
		} catch (e) {
			Misc.errorReport(e);
			D2Bot.stop();
		}

		break;
	default:
		orignal(mode, msg);

		break;
	}
}).apply();

new Overrides.Override(Starter, Starter.scriptMsgEvent, function(orignal, msg) {
	if (typeof msg !== "string") return;
	switch (msg) {
	case "event":
		SoloEvents.check = true;

		break;
	default:
		orignal(msg);

		break;
	}
}).apply();

function deleteAndRemakeChar (info) {
	me.blockMouse = true;

	ControlAction.findCharacter(info);

	MainLoop:
	// Cycle until in lobby
	while (getLocation() !== sdk.game.locations.Lobby) {
		switch (getLocation()) {
		case sdk.game.locations.CharSelect:
			let control = Controls.CharSelectCharInfo0.control;

			if (control) {
				do {
					let text = control.getText();

					if (text instanceof Array && typeof text[1] === "string" && text[1].toLowerCase() === info.charName.toLowerCase()) {
						control.click();
						Controls.CharSelectDelete.click();
						delay(500);
						Controls.CharDeleteYes.click();

						break MainLoop;
					}
				} while (control.getNext());
			}

			break;
		case sdk.game.locations.CharSelectNoChars:
			break MainLoop;

		case sdk.game.locations.Disconnected:
		case sdk.game.locations.OkCenteredErrorPopUp:
			me.blockMouse = false;

			return false;
		default:
			break;
		}

		delay(100);
	}

	me.blockMouse = false;

	// Delete old files - leaving csv file's for now as I don't think they interfere with the overlay
	CharData.delete(true);
	DataFile.create();
	CharData.updateData("me", "finalBuild", setUp.tag);
	Developer.logPerformance && Tracker.initialize();
	D2Bot.printToConsole("Deleted: " + info.charName + ". Now remaking...", 6);
	ControlAction.makeCharacter(setUp);

	return true;
}

function saveInfo (info) {
	// Data-file already exists
	if (FileTools.exists("logs/Kolbot-SoloPlay/" + info.realm + "/" + info.charClass + "-" + info.charClass + "-" + info.charName + ".json")) {
		return;
	}

	let folder, string;

	if (!FileTools.exists("logs/Kolbot-SoloPlay")) {
		folder = dopen("logs");
		folder.create("Kolbot-SoloPlay");
	}

	if (!FileTools.exists("logs/Kolbot-SoloPlay/" + info.realm)) {
		folder = dopen("logs/Kolbot-SoloPlay");
		folder.create(info.realm);
	}

	if (!FileTools.exists("logs/Kolbot-SoloPlay/" + info.realm + "/" + info.charClass + "-" + info.charName + ".json")) {
		string = JSON.stringify(info);
		FileTools.writeText("logs/Kolbot-SoloPlay/" + info.realm + "/" + info.charClass + "-" + info.charName + ".json", string);
	}
}

function timer (tick) {
	let timeStr = " (Time:" + new Date(getTickCount() - tick).toISOString().slice(11, -5) + ") ";
	
	if (Developer.displayClockInConsole) {
		try {
			gameTracker === undefined && (gameTracker = Developer.readObj(Tracker.GTPath));
			let currInGame = getTickCount() - tick;
			let totalTime = Developer.formatTime(gameTracker.Total + currInGame);
			let totalInGame = Developer.formatTime(gameTracker.InGame + currInGame);
			let totalDays = Developer.totalDays(gameTracker.Total + currInGame);
			timeStr += ("(Days: " + totalDays + ") (Total: " + totalTime + ") (IG: " + totalInGame + ") (OOG: " + Developer.formatTime(gameTracker.OOG) + ")");
		} catch (e) {
			print(e);
		}
	}
	return timeStr;
}

function locationAction (location) {
	let i, string, text;

	MainSwitch:
	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:
		D2Bot.updateStatus("Lobby");
		saveInfo(setUp);

		me.blockKeys = false;

		!Starter.firstLogin && (Starter.firstLogin = true);
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);

		if (Starter.Config.PingQuitDelay && Starter.pingQuit) {
			ControlAction.timeoutDelay("Ping Delay", Starter.Config.PingQuitDelay * 1e3);

			Starter.pingQuit = false;
		}

		if (Starter.Config.JoinChannel !== "" || (ChannelConfig[me.profile] && ChannelConfig[me.profile].JoinChannel !== "")) {
			Controls.LobbyEnterChat.click();

			break;
		}

		if (Starter.inGame || Starter.gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3 && !joinInfo) {
				ControlAction.timeoutDelay("Min game time wait", Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck() || SoloEvents.outOfGameCheck()) {
				break;
			}

			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (Starter.Config.ResetCount && Starter.gameCount > Starter.Config.ResetCount) {
				Starter.gameCount = 1;

				DataFile.updateStats("runs", Starter.gameCount);
			}
		}

		Starter.LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.WaitingInLine:
		Starter.LocationEvents.waitingInLine();

		break;
	case sdk.game.locations.LobbyChat:
		D2Bot.updateStatus("Lobby Chat");
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);

		if (Starter.inGame || Starter.gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck() || SoloEvents.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (Starter.Config.ResetCount && Starter.gameCount > Starter.Config.ResetCount) {
				Starter.gameCount = 1;

				DataFile.updateStats("runs", Starter.gameCount);
			}

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AfterGameMessage")) {
				Starter.chanInfo.afterMsg = ChannelConfig[me.profile].AfterGameMessage;
			} else {
				Starter.chanInfo.afterMsg = Starter.Config.AfterGameMessage;
			}

			if (Starter.chanInfo.afterMsg) {
				!Array.isArray(Starter.chanInfo.afterMsg) && (Starter.chanInfo.afterMsg = [Starter.chanInfo.afterMsg]);

				for (i = 0; i < Starter.chanInfo.afterMsg.length; i++) {
					Starter.sayMsg(Starter.chanInfo.afterMsg[i]);
					delay(500);
				}
			}
		}

		if (!chatActionsDone) {
			chatActionsDone = true;

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("JoinChannel")) {
				Starter.chanInfo.joinChannel = ChannelConfig[me.profile].JoinChannel;
			} else {
				Starter.chanInfo.joinChannel = Starter.Config.JoinChannel;
			}

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("FirstJoinMessage")) {
				Starter.chanInfo.firstMsg = ChannelConfig[me.profile].FirstJoinMessage;
			} else {
				Starter.chanInfo.firstMsg = Starter.Config.FirstJoinMessage;
			}

			if (Starter.chanInfo.joinChannel) {
				!Array.isArray(Starter.chanInfo.joinChannel) && (Starter.chanInfo.joinChannel = [Starter.chanInfo.joinChannel]);
				!Array.isArray(Starter.chanInfo.firstMsg) && (Starter.chanInfo.firstMsg = [Starter.chanInfo.firstMsg]);

				for (i = 0; i < Starter.chanInfo.joinChannel.length; i++) {
					ControlAction.timeoutDelay("Chat delay", Starter.Config.ChatActionsDelay * 1e3);

					if (ControlAction.joinChannel(Starter.chanInfo.joinChannel[i])) {
						Starter.useChat = true;
					} else {
						print("ÿc1Unable to join channel, disabling chat messages.");

						Starter.useChat = false;
					}

					if (Starter.chanInfo.firstMsg[i] !== "") {
						Starter.sayMsg(Starter.chanInfo.firstMsg[i]);
						delay(500);
					}
				}
			}
		}

		// Announce game
		if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AnnounceGames")) {
			Starter.chanInfo.announce = ChannelConfig[me.profile].AnnounceGames;
		} else {
			Starter.chanInfo.announce = Starter.Config.AnnounceGames;
		}

		if (Starter.chanInfo.announce) {
			Starter.sayMsg("Next game is " + Starter.gameInfo.gameName + Starter.gameCount + (Starter.gameInfo.gamePass === "" ? "" : "//" + Starter.gameInfo.gamePass));
		}

		Starter.LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.CreateGame:
		ControlAction.timeoutDelay("Create Game Delay", Starter.Config.DelayBeforeLogin * 1e3);
		D2Bot.updateStatus("Creating Game");

		if (typeof Starter.Config.CharacterDifference === "number") {
			Controls.CharacterDifference.disabled === sdk.game.controls.Disabled && Controls.CharacterDifferenceButton.click();
			Controls.CharacterDifference.setText(Starter.Config.CharacterDifference.toString());
		} else if (!Starter.Config.CharacterDifference && Controls.CharacterDifference.disabled === 5) {
			Controls.CharacterDifferenceButton.click();
		}

		typeof Starter.Config.MaxPlayerCount === "number" && Controls.MaxPlayerCount.setText(Starter.Config.MaxPlayerCount.toString());

		// Get game name if there is none
		while (!Starter.gameInfo.gameName) {
			D2Bot.requestGameInfo();
			delay(500);
		}

		if (CharData.getStats().me.setDifficulty) {
			Starter.gameInfo.difficulty = CharData.getStats().me.setDifficulty;

			// only set the profile if the values aren't already the same
			if (Starter.gameInfo.difficulty !== setUp.difficulty) {
				D2Bot.setProfile(null, null, null, Starter.gameInfo.difficulty);
			}
			delay(200);
		}

		Starter.gameInfo.gameName = DataFile.getStats().gameName;
		(Starter.gameInfo.gameName === "" || Starter.gameInfo.gameName === "Name") && (Starter.gameInfo.gameName = setUp.charName.substring(0, 7) + "-" + Starter.randomString(3, false) + "-");

		// FTJ handler
		if (Starter.lastGameStatus === "pending") {
			Starter.isUp = "no";

			D2Bot.printToConsole("Failed to create game");
			ControlAction.timeoutDelay("FTJ delay", Starter.Config.FTJDelay * 1e3);
			D2Bot.updateRuns();
		}

		ControlAction.createGame((Starter.gameInfo.gameName + Starter.gameCount), (Starter.gameInfo.gamePass === "Password" ? Starter.randomString(null, true) : Starter.gameInfo.gamePass), Starter.gameInfo.difficulty, Starter.Config.CreateGameDelay * 1000);
		Starter.lastGameStatus = "pending";
		Starter.setNextGame(Starter.gameInfo);
		Starter.locationTimeout(10000, location);

		break;
	case sdk.game.locations.JoinGame:
	case sdk.game.locations.Ladder:
	case sdk.game.locations.ChannelList:
		Starter.LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.Login:
	case sdk.game.locations.SplashScreen:
		Starter.inGame && (Starter.inGame = false);
		if (getLocation() === sdk.game.locations.MainMenu
			&& Profile().type === sdk.game.profiletype.SinglePlayer
			&& Starter.firstRun
			&& Controls.SinglePlayer.click()) {
			return;
		}

		// Wrong char select screen fix
		if (getLocation() === sdk.game.locations.CharSelect) {
			hideConsole(); // seems to fix odd crash with single-player characters if the console is open to type in
			if ((Profile().type === sdk.game.profiletype.Battlenet && !Controls.CharSelectCurrentRealm.control)
				|| ((Profile().type !== sdk.game.profiletype.Battlenet && Controls.CharSelectCurrentRealm.control))) {
				Controls.CharSelectExit.click();
			
				return;
			}
		}

		// Multiple realm botting fix in case of R/D or disconnect
		Starter.firstLogin && getLocation() === sdk.game.locations.Login && Controls.CharSelectExit.click();
				
		D2Bot.updateStatus("Logging In");

		try {
			// make battlenet accounts/characters
			if (battlenet) {
				ControlAction.timeoutDelay("Login Delay", Starter.Config.DelayBeforeLogin * 1e3);
				// existing account
				if (setUp.account !== "") {
					try {
						login(me.profile);
					} catch (error) {
						if (DataFile.getStats().AcctPswd) {
							setUp.account = DataFile.getStats().AcctName;
							setUp.password = DataFile.getStats().AcctPswd;

							for (let i = 0; i < 5; i++) {
								if (ControlAction.loginAccount(setUp)) {
									break;
								}

								ControlAction.timeoutDelay("Unable to Connect", Starter.Config.UnableToConnectDelay * 6e4);
								setUp.account = DataFile.getStats().AcctName;
								setUp.password = DataFile.getStats().AcctPswd;
							}
						}
					}
				} else {
					// new account
					if (setUp.account === "") {
						if (Starter.Config.GlobalAccount || Starter.Config.GlobalAccountPassword) {
							setUp.account = Starter.Config.GlobalAccount.length > 0 ? Starter.Config.GlobalAccount + randomNumberGen(Starter.Config.AccountSuffixLength) : Starter.randomString(12, true);
							setUp.password = Starter.Config.GlobalAccountPassword.length > 0 ? Starter.Config.GlobalAccountPassword : Starter.randomString(12, true);

							if (setUp.account.length > 15) {
								D2Bot.printToConsole("Kolbot-SoloPlay: Account name exceeds MAXIMUM length (15). Please enter a shorter name or reduce the AccountSuffixLength under StarterConfig", 6);
								D2Bot.setProfile("", "", null, "Normal");
								D2Bot.stop();
							}

							if (setUp.password.length > 15) {
								D2Bot.printToConsole("Kolbot-SoloPlay: Password name exceeds MAXIMUM length (15). Please enter a shorter name under StarterConfig", 6);
								D2Bot.setProfile("", "", null, "Normal");
								D2Bot.stop();
							}

							print("Kolbot-SoloPlay :: Generated account information. " + (Starter.Config.GlobalAccount.length > 0 ? "Pre-defined " : "Random ") + "account used");
							print("Kolbot-SoloPlay :: Generated password information. " + (Starter.Config.GlobalAccountPassword.length > 0 ? "Pre-defined " : "Random ") + "password used");
							ControlAction.timeoutDelay("Generating Account Information", Starter.Config.DelayBeforeLogin * 1e3);
						} else {
							setUp.account = Starter.randomString(12, true);
							setUp.password = Starter.randomString(12, true);
							print("Generating Random Account Information");
							ControlAction.timeoutDelay("Generating Random Account Information", Starter.Config.DelayBeforeLogin * 1e3);
						}

						if (ControlAction.makeAccount(setUp)) {
							D2Bot.setProfile(setUp.account, setUp.password, null, "Normal");
							DataFile.updateStats("AcctName", setUp.account);
							DataFile.updateStats("AcctPswd", setUp.password);

							break;
						} else {
							setUp.account = "";
							setUp.password = "";
							D2Bot.setProfile(setUp.account, setUp.password, null, "Normal");
							D2Bot.restart(true);
						}
					}
				}
			} else {
				// SP/TCP  characters
				try {
					login(me.profile);
				} catch (err) {
					// Try to find the character and if that fails, make character
					if (!ControlAction.findCharacter(setUp)) {
						// Pop-up that happens when choosing a dead HC char
						if (getLocation() === sdk.game.locations.OkCenteredErrorPopUp) {
							Controls.OkCentered.click();	// Exit from that pop-up
							D2Bot.printToConsole("Character died", 9);
							deleteAndRemakeChar(setUp);
						} else {
							// If make character fails, check how many characters are on that account
							if (!ControlAction.makeCharacter(setUp)) {
								// Account is full
								if (ControlAction.getCharacters().length >= 18) {
									D2Bot.printToConsole("Kolbot-SoloPlay: Account is full", 8);
									D2Bot.stop();
								}
							}
						}
					}
				}
			}
		} catch (e) {
			print(e + " " + getLocation());
		}

		break;
	case sdk.game.locations.LoginError:
		string = "";
		text = Controls.LoginErrorText.getText();

		if (text) {
			for (i = 0; i < text.length; i++) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5232): // illegal characters
			case getLocaleString(5233): // disallowed words
				D2Bot.stop();

				break;
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");
				ControlAction.timeoutDelay("Invalid password delay", Starter.Config.InvalidPasswordDelay * 6e4);
				D2Bot.printToConsole("Invalid Password - Restart");
				D2Bot.restart();

				break;
			case getLocaleString(5219): // password must be 2 characters
				D2Bot.updateStatus("Password must be 2 characters");
				D2Bot.printToConsole("Password must be 2 characters");
				D2Bot.stop();

				break;
			case getLocaleString(5208): // Invalid account
			case getLocaleString(5239): // An account name already exists
			case getLocaleString(5249): // Unable to create account
				D2Bot.updateStatus("Invalid Account Name");
				D2Bot.printToConsole("Invalid Account Name");
				setUp.account = "";
				setUp.password = "";
				D2Bot.setProfile(setUp.account, setUp.password);
				D2Bot.restart(true);

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected from battle.net.");
				D2Bot.printToConsole("Disconnected from battle.net.");
				Controls.OkCentered.click();
				Controls.LoginErrorOk.click();

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
		}

		Controls.LoginErrorOk.click();
		delay(1000);
		Controls.CharSelectExit.click();

		break;
	case sdk.game.locations.LoginUnableToConnect:
	case sdk.game.locations.TcpIpUnableToConnect:
		Starter.LocationEvents.unableToConnect();

		break;
	case sdk.game.locations.RealmDown:
		Starter.LocationEvents.realmDown();

		break;
	case sdk.game.locations.Disconnected:
	case sdk.game.locations.LobbyLostConnection:
		D2Bot.updateStatus("Disconnected/LostConnection");
		delay(1000);
		Controls.OkCentered.click();

		break;
	case sdk.game.locations.CharSelectPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.CdKeyInUse:
	case sdk.game.locations.InvalidCdKey:
		Starter.LocationEvents.loginError();

		break;
	case sdk.game.locations.SelectDifficultySP:
		Starter.LocationEvents.selectDifficultySP();

		break;
	case sdk.game.locations.MainMenuConnecting:
		!Starter.locationTimeout(Starter.Config.ConnectingTimeout * 1e3, location) && Controls.LoginCancelWait.click();

		break;
	case sdk.game.locations.CharacterCreate:
		!Starter.locationTimeout(5e3, location) && Controls.CharSelectExit.click();

		break;
	case sdk.game.locations.CharSelect:
	case sdk.game.locations.CharSelectConnecting:
	case sdk.game.locations.CharSelectNoChars:
		string = "";
		text = Controls.CharSelectError.getText();

		if (text) {
			for (i = 0; i < text.length; i++) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			// CDKey disabled from realm play
			if (string === getLocaleString(11161)) {
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (Starter.deadCheck && deleteAndRemakeChar(setUp)) {
			Starter.deadCheck = false;
		}

		if (setUp) {
			if (!ControlAction.findCharacter(setUp)) {
				if (setUp.charName === DataFile.getObj().name) {
					ControlAction.timeoutDelay("[R/D] Character not found ", 18e4);
					D2Bot.printToConsole("Avoid Creating New Character - Restart");
					D2Bot.restart();
				} else {
					if (!ControlAction.makeCharacter(setUp)) {
						if (ControlAction.getCharacters().length >= 18) {
							D2Bot.printToConsole("Kolbot-SoloPlay: Account is full", 9);
							D2Bot.stop();
						}
					}
				}
			} else {
				ControlAction.loginCharacter(setUp, false);
			}
		}

		if (!Starter.locationTimeout(Starter.Config.ConnectingTimeout * 1e3, location)) {
			Controls.CharSelectExit.click();
			Starter.gameInfo.rdBlocker && D2Bot.restart();
		}

		break;
	case sdk.game.locations.ServerDown: // Server Down - not much to do but wait..
		break;
	case sdk.game.locations.LobbyPleaseWait: // Lobby - Please Wait
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.GameNameExists:
		Controls.CreateGameWindow.click();

		Starter.gameCount += 1;
		Starter.lastGameStatus = "ready";

		break;
	case sdk.game.locations.GatewaySelect:
		Controls.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist:
		Starter.LocationEvents.gamneDoesNotExist();

		break;
	case sdk.game.locations.RegisterEmail:
		Controls.EmailDontRegisterContinue.control ? Controls.EmailDontRegisterContinue.click() : Controls.EmailDontRegister.click();

		break;
	case sdk.game.locations.GameIsFull:
		// doesn't happen when making
		break;
	case sdk.game.locations.OtherMultiplayer:
		Starter.LocationEvents.otherMultiplayerSelect();

		break;
	case sdk.game.locations.TcpIp:
		Profile().type === sdk.game.profiletype.TcpIpHost ? Controls.TcpIpHost.click() : Controls.TcpIpCancel.click();

		break;
	case sdk.game.locations.TcpIpEnterIp:
		Controls.TcpIpCancel.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main () {
	debugLog(me.profile);
	addEventListener('copydata', Starter.receiveCopyData);
	addEventListener('scriptmsg', Starter.scriptMsgEvent);

	let oogTick = getTickCount();

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Profile().type === sdk.game.profiletype.TcpIpJoin) {
		D2Bot.printToConsole("TcpJoin is unsupported.");
		D2Bot.stop();
	}

	Developer.logPerformance && Tracker.checkValidity();
	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		battlenet && D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(setUp).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
		console.log(setUp);
	}

	if (setUp.charName === "") {
		print("Generating Character Name");
		setUp.charName = NameGen();
		D2Bot.setProfile(null, null, setUp.charName, "Normal");

		let gamename = setUp.charName.substring(0, 7) + "-" + Starter.randomString(3, false) + "-";
		DataFile.updateStats("gameName", gamename);

		delay(50);
	} else if (Starter.firstRun) {
		// should be first run on this profile since we created a new data file so initialize difficulty to normal
		// check first before setting to avoid unneeded setProfile calls
		setUp.difficulty !== "Normal" && D2Bot.setProfile(null, null, null, "Normal");
	}

	let myExp, myGold, resPenalty, frRes, crRes, lrRes, prRes, areaName, diffName;

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				Starter.isUp = "yes";

				if (!Starter.inGame) {
					Starter.gameStart = getTickCount();
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					resPenalty = me.gametype === 0 ? [0, 20, 50][me.diff] : [0, 40, 100][me.diff];
					diffName = ['Norm', 'Night', 'Hell'][me.diff];
					DataFile.updateStats("runs", Starter.gameCount);
					DataFile.updateStats("ingameTick");
					Developer.logPerformance && Tracker.update((getTickCount() - oogTick));
					Developer.displayClockInConsole && (gameTracker = Developer.readObj(Tracker.GTPath));
					oogTick = 0;
				}

				if (me.ingame && me.gameReady) {
					let statusString = "";

					try {
						myExp = me.getStat(13) > 0 ? Experience.progress() : 0;
						myGold = me.getStat(14) + me.getStat(15);
						frRes = Math.min(75 + me.getStat(sdk.stats.MaxFireResist), me.getStat(39) - resPenalty);
						crRes = Math.min(75 + me.getStat(sdk.stats.MaxColdResist), me.getStat(43) - resPenalty);
						lrRes = Math.min(75 + me.getStat(sdk.stats.MaxLightResist), me.getStat(41) - resPenalty);
						prRes = Math.min(75 + me.getStat(sdk.stats.MaxPoisonResist), me.getStat(45) - resPenalty);
						areaName = !!me.area ? Pather.getAreaName(me.area) : "";
						statusString = me.name + " | Lvl: " + me.charlvl + " (" + myExp + "%) (Diff: " + diffName + ") (A: " + areaName + ") (G: " + myGold + ") (F: " + frRes + "/C: " + crRes + "/L: " + lrRes + "/P: " + prRes + ")";
					} catch (e) {
						print(e);
					}

					D2Bot.updateStatus(statusString + timer(Starter.gameStart));
				}
			}

			delay(1000);
		}

		// was in game so start recording oog time
		Starter.inGame && oogTick === 0 && (oogTick = getTickCount());

		Starter.isUp = "no";
		locationAction(getLocation());
		delay(1000);
	}
}
